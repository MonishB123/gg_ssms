import torch

def small_test_case():
    pairs = torch.tensor([
        [0, 1], [1, 2], [2, 3], [3, 4], [4, 5],
        [5, 6], [6, 7], [7, 8], [8, 9], [8, 10],
        [8, 11], [9, 10], [9, 11], [10, 11]
    ], dtype=torch.int32)

    weights = torch.tensor([[
        0.9635, 0.6404, 0.8880, 0.9658, 0.8253,
        0.7223, 0.6875, 0.8048, 0.6865, 0.8971,
        0.7102, 0.6896, 0.6908, 0.6234
    ]])

    tree = torch.tensor([[
        [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6],
        [6, 7], [7, 8], [8, 9], [10, 11],
        [9, 10]
    ]], dtype=torch.int32)

    threshold = 0.7

    return tree, pairs, weights, threshold

def training_test_case(): 
    pairs = torch.tensor([[ 0,  1],
        [ 0,  2],
        [ 0,  3],
        [ 1,  2],
        [ 1,  3],
        [ 1,  4],
        [ 2,  3],
        [ 2,  4],
        [ 2,  5],
        [ 3,  4],
        [ 3,  5],
        [ 3,  6],
        [ 4,  5],
        [ 4,  6],
        [ 4,  7],
        [ 5,  6],
        [ 5,  7],
        [ 5,  8],
        [ 6,  7],
        [ 6,  8],
        [ 6,  9],
        [ 7,  8],
        [ 7,  9],
        [ 7, 10],
        [ 8,  9],
        [ 8, 10],
        [ 8, 11],
        [ 9, 10],
        [ 9, 11],
        [ 9, 12],
        [10, 11],
        [10, 12],
        [10, 13],
        [11, 12],
        [11, 13],
        [11, 14],
        [12, 13],
        [12, 14],
        [12, 15],
        [13, 14],
        [13, 15],
        [13, 16],
        [14, 15],
        [14, 16],
        [14, 17],
        [15, 16],
        [15, 17],
        [15, 18],
        [16, 17],
        [16, 18],
        [16, 19],
        [17, 18],
        [17, 19],
        [17, 20],
        [18, 19],
        [18, 20],
        [18, 21],
        [19, 20],
        [19, 21],
        [19, 22],
        [20, 21],
        [20, 22],
        [20, 23],
        [21, 22],
        [21, 23],
        [21, 24],
        [22, 23],
        [22, 24],
        [22, 25],
        [23, 24],
        [23, 25],
        [23, 26],
        [24, 25],
        [24, 26],
        [24, 27],
        [25, 26],
        [25, 27],
        [25, 28],
        [26, 27],
        [26, 28],
        [26, 29],
        [27, 28],
        [27, 29],
        [27, 30],
        [28, 29],
        [28, 30],
        [28, 31],
        [29, 30],
        [29, 31],
        [29, 32],
        [30, 31],
        [30, 32],
        [30, 33],
        [31, 32],
        [31, 33],
        [31, 34],
        [32, 33],
        [32, 34],
        [32, 35],
        [33, 34],
        [33, 35],
        [33, 36],
        [34, 35],
        [34, 36],
        [34, 37],
        [35, 36],
        [35, 37],
        [35, 38],
        [36, 37],
        [36, 38],
        [36, 39],
        [37, 38],
        [37, 39],
        [38, 39]], dtype=torch.int32)

    weights = torch.tensor([[0.3682, 0.3681, 0.3684, 0.3679, 0.3681, 0.3682, 0.3680, 0.3682, 0.3681,
         0.3680, 0.3680, 0.3680, 0.3680, 0.3680, 0.3693, 0.3680, 0.3689, 0.3705,
         0.3693, 0.3705, 0.3720, 0.3695, 0.3698, 0.3721, 0.3697, 0.3719, 0.3724,
         0.3702, 0.3712, 0.3727, 0.3681, 0.3692, 0.3730, 0.3693, 0.3728, 0.3741,
         0.3708, 0.3713, 0.3751, 0.3703, 0.3732, 0.3757, 0.3712, 0.3727, 0.3720,
         0.3696, 0.3692, 0.3702, 0.3683, 0.3687, 0.3699, 0.3682, 0.3688, 0.3693,
         0.3682, 0.3687, 0.3689, 0.3681, 0.3683, 0.3685, 0.3681, 0.3681, 0.3684,
         0.3681, 0.3682, 0.3686, 0.3681, 0.3683, 0.3682, 0.3680, 0.3681, 0.3681,
         0.3681, 0.3680, 0.3682, 0.3683, 0.3680, 0.3684, 0.3684, 0.3680, 0.3686,
         0.3684, 0.3682, 0.3689, 0.3687, 0.3689, 0.3695, 0.3684, 0.3688, 0.3694,
         0.3682, 0.3688, 0.3697, 0.3682, 0.3689, 0.3700, 0.3682, 0.3689, 0.3695,
         0.3681, 0.3687, 0.3688, 0.3682, 0.3682, 0.4027, 0.3681, 0.4024, 0.4441,
         0.4001, 0.4432, 0.4810, 0.4275, 0.4498, 0.4428],
        [0.3686, 0.3697, 0.3707, 0.3682, 0.3686, 0.3689, 0.3681, 0.3682, 0.3694,
         0.3681, 0.3688, 0.3708, 0.3694, 0.3710, 0.3741, 0.3701, 0.3720, 0.3747,
         0.3693, 0.3721, 0.3758, 0.3697, 0.3728, 0.3746, 0.3688, 0.3698, 0.3700,
         0.3682, 0.3687, 0.3693, 0.3684, 0.3689, 0.3698, 0.3683, 0.3687, 0.3695,
         0.3681, 0.3685, 0.3689, 0.3682, 0.3684, 0.3686, 0.3681, 0.3682, 0.3687,
         0.3680, 0.3682, 0.3687, 0.3683, 0.3683, 0.3686, 0.3684, 0.3681, 0.3686,
         0.3682, 0.3681, 0.3681, 0.3681, 0.3680, 0.3682, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3679, 0.3680, 0.3679, 0.3680, 0.3679, 0.3680, 0.3681,
         0.3680, 0.3681, 0.3681, 0.3680, 0.3681, 0.3684, 0.3680, 0.3683, 0.3687,
         0.3683, 0.3687, 0.3697, 0.3682, 0.3688, 0.3698, 0.3684, 0.3693, 0.3699,
         0.3684, 0.3691, 0.3695, 0.3681, 0.3684, 0.3686, 0.3681, 0.3682, 0.3692,
         0.3681, 0.3690, 0.3699, 0.3684, 0.3692, 0.4022, 0.3682, 0.3964, 0.4373,
         0.3955, 0.4325, 0.4715, 0.4281, 0.4458, 0.4323],
        [0.3679, 0.3681, 0.3685, 0.3680, 0.3684, 0.3695, 0.3681, 0.3689, 0.3700,
         0.3683, 0.3691, 0.3696, 0.3682, 0.3688, 0.3695, 0.3682, 0.3690, 0.3704,
         0.3685, 0.3698, 0.3701, 0.3684, 0.3697, 0.3705, 0.3691, 0.3703, 0.3702,
         0.3692, 0.3692, 0.3684, 0.3690, 0.3690, 0.3686, 0.3687, 0.3694, 0.3692,
         0.3692, 0.3702, 0.3692, 0.3688, 0.3692, 0.3690, 0.3691, 0.3698, 0.3689,
         0.3689, 0.3686, 0.3684, 0.3681, 0.3683, 0.3681, 0.3682, 0.3683, 0.3682,
         0.3682, 0.3683, 0.3681, 0.3684, 0.3683, 0.3682, 0.3684, 0.3681, 0.3684,
         0.3681, 0.3683, 0.3683, 0.3680, 0.3681, 0.3682, 0.3681, 0.3682, 0.3684,
         0.3682, 0.3682, 0.3682, 0.3680, 0.3681, 0.3681, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3680, 0.3680, 0.3681, 0.3682, 0.3680, 0.3681, 0.3682,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3682, 0.3682, 0.3681, 0.3681, 0.3682,
         0.3680, 0.3680, 0.3680, 0.3680, 0.3680, 0.4006, 0.3680, 0.3991, 0.4426,
         0.4015, 0.4440, 0.4754, 0.4370, 0.4495, 0.4426],
        [0.3680, 0.3681, 0.3682, 0.3680, 0.3681, 0.3682, 0.3680, 0.3680, 0.3681,
         0.3680, 0.3682, 0.3682, 0.3681, 0.3681, 0.3682, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3682, 0.3684, 0.3680, 0.3682, 0.3683,
         0.3681, 0.3682, 0.3686, 0.3680, 0.3683, 0.3689, 0.3681, 0.3686, 0.3698,
         0.3684, 0.3695, 0.3713, 0.3686, 0.3698, 0.3708, 0.3689, 0.3697, 0.3712,
         0.3693, 0.3701, 0.3714, 0.3687, 0.3693, 0.3686, 0.3684, 0.3685, 0.3683,
         0.3682, 0.3685, 0.3710, 0.3685, 0.3722, 0.3747, 0.3709, 0.3736, 0.3751,
         0.3693, 0.3724, 0.3768, 0.3703, 0.3745, 0.3757, 0.3703, 0.3709, 0.3721,
         0.3683, 0.3690, 0.3697, 0.3689, 0.3693, 0.3703, 0.3686, 0.3688, 0.3694,
         0.3681, 0.3682, 0.3686, 0.3682, 0.3683, 0.3684, 0.3682, 0.3682, 0.3681,
         0.3683, 0.3683, 0.3682, 0.3683, 0.3681, 0.3682, 0.3680, 0.3681, 0.3682,
         0.3680, 0.3680, 0.3680, 0.3681, 0.3680, 0.3968, 0.3680, 0.3982, 0.4384,
         0.3984, 0.4410, 0.4709, 0.4304, 0.4467, 0.4380],
        [0.3680, 0.3681, 0.3681, 0.3680, 0.3680, 0.3680, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3681, 0.3682, 0.3680, 0.3681, 0.3682, 0.3680, 0.3680, 0.3681,
         0.3680, 0.3682, 0.3682, 0.3681, 0.3681, 0.3682, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3682, 0.3684, 0.3680, 0.3682, 0.3683,
         0.3681, 0.3682, 0.3686, 0.3680, 0.3683, 0.3689, 0.3681, 0.3686, 0.3698,
         0.3684, 0.3695, 0.3713, 0.3686, 0.3698, 0.3708, 0.3689, 0.3697, 0.3712,
         0.3693, 0.3701, 0.3714, 0.3687, 0.3693, 0.3686, 0.3684, 0.3685, 0.3683,
         0.3682, 0.3685, 0.3710, 0.3685, 0.3722, 0.3747, 0.3709, 0.3736, 0.3751,
         0.3693, 0.3724, 0.3768, 0.3703, 0.3745, 0.3757, 0.3703, 0.3709, 0.3721,
         0.3683, 0.3690, 0.3697, 0.3689, 0.3693, 0.3703, 0.3686, 0.3688, 0.3694,
         0.3681, 0.3682, 0.3686, 0.3682, 0.3683, 0.3684, 0.3682, 0.3682, 0.3681,
         0.3683, 0.3683, 0.3682, 0.3683, 0.3681, 0.3987, 0.3680, 0.3960, 0.4379,
         0.3968, 0.4387, 0.4694, 0.4294, 0.4454, 0.4357],
        [0.3680, 0.3683, 0.3689, 0.3681, 0.3686, 0.3698, 0.3684, 0.3695, 0.3713,
         0.3686, 0.3698, 0.3708, 0.3689, 0.3697, 0.3712, 0.3693, 0.3701, 0.3714,
         0.3687, 0.3693, 0.3686, 0.3684, 0.3685, 0.3683, 0.3682, 0.3685, 0.3710,
         0.3685, 0.3722, 0.3747, 0.3709, 0.3736, 0.3751, 0.3693, 0.3724, 0.3768,
         0.3703, 0.3745, 0.3757, 0.3703, 0.3709, 0.3721, 0.3683, 0.3690, 0.3697,
         0.3689, 0.3693, 0.3703, 0.3686, 0.3688, 0.3694, 0.3681, 0.3682, 0.3686,
         0.3682, 0.3683, 0.3684, 0.3682, 0.3682, 0.3681, 0.3683, 0.3683, 0.3682,
         0.3683, 0.3681, 0.3682, 0.3680, 0.3681, 0.3682, 0.3680, 0.3680, 0.3680,
         0.3681, 0.3680, 0.3681, 0.3680, 0.3680, 0.3681, 0.3680, 0.3680, 0.3681,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3680, 0.3680, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3682, 0.3680, 0.3680, 0.3680, 0.3680, 0.3679, 0.3686,
         0.3680, 0.3687, 0.3696, 0.3685, 0.3694, 0.3977, 0.3684, 0.4015, 0.4527,
         0.4022, 0.4574, 0.4803, 0.4329, 0.4496, 0.4450],
        [0.3682, 0.3681, 0.3689, 0.3681, 0.3684, 0.3694, 0.3686, 0.3694, 0.3708,
         0.3689, 0.3692, 0.3709, 0.3692, 0.3699, 0.3717, 0.3694, 0.3705, 0.3723,
         0.3692, 0.3699, 0.3722, 0.3693, 0.3715, 0.3727, 0.3691, 0.3712, 0.3734,
         0.3696, 0.3711, 0.3721, 0.3691, 0.3695, 0.3691, 0.3687, 0.3690, 0.3693,
         0.3682, 0.3686, 0.3686, 0.3681, 0.3682, 0.3681, 0.3681, 0.3680, 0.3680,
         0.3680, 0.3681, 0.3681, 0.3680, 0.3681, 0.3680, 0.3680, 0.3680, 0.3681,
         0.3680, 0.3680, 0.3682, 0.3680, 0.3682, 0.3682, 0.3680, 0.3681, 0.3681,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3680, 0.3680, 0.3681, 0.3680, 0.3680,
         0.3681, 0.3680, 0.3680, 0.3679, 0.3680, 0.3680, 0.3680, 0.3681, 0.3681,
         0.3681, 0.3680, 0.3682, 0.3682, 0.3682, 0.3685, 0.3682, 0.3682, 0.3683,
         0.3682, 0.3682, 0.3685, 0.3682, 0.3681, 0.3690, 0.3681, 0.3683, 0.3692,
         0.3686, 0.3692, 0.3705, 0.3685, 0.3690, 0.3998, 0.3684, 0.3960, 0.4361,
         0.3939, 0.4337, 0.4690, 0.4252, 0.4468, 0.4312],
        [0.3681, 0.3685, 0.3690, 0.3681, 0.3684, 0.3688, 0.3680, 0.3683, 0.3685,
         0.3681, 0.3682, 0.3684, 0.3681, 0.3681, 0.3681, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3679, 0.3679, 0.3680, 0.3679, 0.3680, 0.3680, 0.3680,
         0.3680, 0.3680, 0.3681, 0.3680, 0.3681, 0.3684, 0.3681, 0.3682, 0.3682,
         0.3683, 0.3681, 0.3684, 0.3681, 0.3681, 0.3687, 0.3680, 0.3684, 0.3685,
         0.3682, 0.3684, 0.3689, 0.3681, 0.3684, 0.3685, 0.3683, 0.3683, 0.3681,
         0.3682, 0.3681, 0.3682, 0.3680, 0.3681, 0.3683, 0.3681, 0.3682, 0.3686,
         0.3680, 0.3682, 0.3687, 0.3681, 0.3686, 0.3691, 0.3682, 0.3686, 0.3690,
         0.3681, 0.3688, 0.3702, 0.3683, 0.3700, 0.3702, 0.3688, 0.3693, 0.3695,
         0.3683, 0.3693, 0.3705, 0.3685, 0.3695, 0.3706, 0.3683, 0.3689, 0.3695,
         0.3681, 0.3687, 0.3693, 0.3682, 0.3687, 0.3685, 0.3681, 0.3682, 0.3683,
         0.3680, 0.3684, 0.3688, 0.3680, 0.3684, 0.4014, 0.3682, 0.4002, 0.4439,
         0.4004, 0.4408, 0.4769, 0.4307, 0.4505, 0.4402]])

    tree = torch.tensor([[[ 0,  2],
         [ 1,  2],
         [ 3,  6],
         [ 4,  5],
         [ 5,  6],
         [ 5,  7],
         [ 7,  8],
         [ 8,  9],
         [10, 11],
         [10, 12],
         [13, 14],
         [15, 17],
         [16, 17],
         [17, 18],
         [19, 20],
         [20, 21],
         [22, 23],
         [23, 24],
         [24, 26],
         [25, 27],
         [26, 28],
         [27, 29],
         [30, 31],
         [32, 33],
         [33, 34],
         [35, 36],
         [36, 37],
         [37, 38],
         [38, 39],
         [ 2,  3],
         [ 9, 10],
         [12, 13],
         [18, 19],
         [20, 22],
         [24, 25],
         [31, 32],
         [34, 36],
         [14, 15],
         [29, 30]],

        [[ 0,  1],
         [ 1,  2],
         [ 2,  3],
         [ 3,  4],
         [ 3,  5],
         [ 6,  7],
         [ 8,  9],
         [ 9, 10],
         [11, 12],
         [12, 13],
         [14, 15],
         [15, 16],
         [17, 19],
         [18, 20],
         [19, 21],
         [20, 23],
         [21, 24],
         [22, 24],
         [23, 24],
         [24, 25],
         [26, 27],
         [28, 29],
         [30, 31],
         [31, 32],
         [32, 33],
         [33, 34],
         [35, 36],
         [36, 37],
         [37, 38],
         [38, 39],
         [ 5,  6],
         [ 7,  8],
         [10, 11],
         [13, 14],
         [25, 26],
         [26, 28],
         [29, 30],
         [34, 35],
         [15, 17]],

        [[ 0,  1],
         [ 1,  2],
         [ 2,  3],
         [ 4,  5],
         [ 5,  6],
         [ 7,  8],
         [ 9, 12],
         [10, 13],
         [11, 12],
         [13, 14],
         [15, 18],
         [16, 17],
         [18, 21],
         [16, 19],
         [20, 22],
         [21, 22],
         [22, 23],
         [22, 24],
         [25, 26],
         [26, 27],
         [27, 28],
         [27, 29],
         [30, 31],
         [31, 32],
         [33, 34],
         [33, 35],
         [35, 36],
         [35, 37],
         [37, 38],
         [38, 39],
         [ 3,  4],
         [ 6,  7],
         [10, 12],
         [14, 17],
         [24, 25],
         [17, 20],
         [27, 30],
         [32, 33],
         [ 8,  9]],

        [[ 0,  1],
         [ 2,  3],
         [ 3,  4],
         [ 5,  6],
         [ 5,  7],
         [ 8,  9],
         [10, 11],
         [11, 12],
         [12, 13],
         [13, 14],
         [14, 15],
         [16, 19],
         [17, 20],
         [18, 19],
         [21, 22],
         [22, 23],
         [24, 25],
         [26, 27],
         [27, 28],
         [29, 32],
         [29, 30],
         [31, 33],
         [32, 33],
         [33, 34],
         [33, 35],
         [34, 36],
         [34, 37],
         [37, 38],
         [38, 39],
         [ 1,  2],
         [ 7,  8],
         [ 9, 10],
         [17, 18],
         [23, 24],
         [25, 26],
         [28, 29],
         [ 4,  5],
         [15, 16],
         [20, 21]],

        [[ 0,  1],
         [ 1,  2],
         [ 2,  3],
         [ 2,  4],
         [ 5,  6],
         [ 6,  7],
         [ 8,  9],
         [ 8, 10],
         [11, 12],
         [13, 14],
         [14, 15],
         [15, 16],
         [16, 17],
         [17, 18],
         [19, 22],
         [20, 23],
         [21, 22],
         [24, 25],
         [25, 26],
         [27, 28],
         [29, 30],
         [30, 31],
         [32, 35],
         [32, 33],
         [34, 36],
         [35, 36],
         [35, 37],
         [37, 38],
         [38, 39],
         [ 2,  5],
         [10, 11],
         [12, 13],
         [20, 21],
         [26, 27],
         [28, 29],
         [31, 32],
         [ 7,  8],
         [18, 19],
         [23, 24]],

        [[ 0,  1],
         [ 1,  2],
         [ 2,  3],
         [ 3,  4],
         [ 4,  5],
         [ 6,  9],
         [ 7, 10],
         [ 8,  9],
         [11, 12],
         [12, 13],
         [14, 15],
         [16, 17],
         [17, 18],
         [19, 22],
         [19, 20],
         [21, 23],
         [22, 23],
         [23, 24],
         [23, 25],
         [24, 26],
         [27, 28],
         [29, 32],
         [30, 31],
         [29, 31],
         [32, 34],
         [33, 34],
         [35, 36],
         [34, 37],
         [37, 38],
         [38, 39],
         [ 5,  6],
         [ 7,  8],
         [13, 14],
         [15, 16],
         [18, 19],
         [26, 27],
         [27, 29],
         [34, 35],
         [10, 11]],

        [[ 0,  2],
         [ 1,  2],
         [ 1,  3],
         [ 3,  4],
         [ 4,  5],
         [ 6,  7],
         [ 8,  9],
         [10, 11],
         [11, 12],
         [12, 13],
         [13, 16],
         [14, 16],
         [15, 16],
         [16, 17],
         [18, 19],
         [20, 21],
         [21, 22],
         [23, 25],
         [24, 27],
         [25, 26],
         [26, 27],
         [25, 28],
         [27, 29],
         [29, 30],
         [31, 33],
         [32, 33],
         [32, 34],
         [35, 36],
         [36, 37],
         [37, 38],
         [38, 39],
         [ 5,  6],
         [ 7,  8],
         [17, 18],
         [22, 25],
         [30, 32],
         [34, 35],
         [ 9, 10],
         [19, 20]],

        [[ 0,  1],
         [ 1,  2],
         [ 2,  3],
         [ 4,  6],
         [ 5,  7],
         [ 6,  9],
         [ 7,  8],
         [ 7, 10],
         [ 8, 11],
         [11, 12],
         [13, 14],
         [14, 15],
         [16, 17],
         [17, 20],
         [18, 20],
         [19, 20],
         [21, 22],
         [22, 23],
         [24, 25],
         [25, 26],
         [27, 28],
         [29, 30],
         [30, 31],
         [32, 33],
         [33, 34],
         [34, 35],
         [35, 36],
         [35, 37],
         [37, 38],
         [38, 39],
         [ 3,  4],
         [ 6,  7],
         [12, 14],
         [20, 21],
         [23, 24],
         [28, 29],
         [31, 32],
         [15, 16],
         [26, 27]]], dtype=torch.int32)

    threshold = 0.45
    return tree, pairs, weights, threshold

def batch_test_case():
    pairs = torch.tensor([[ 0,  1],
         [ 0,  2],
         [ 3,  4],
         [ 5,  6],
         [ 6,  7],
         [ 8,  9],
         [10, 11],
         [11, 13],
         [12, 13],
         [12, 14],
         [14, 15],
         [13, 16],
         [16, 17],
         [17, 18],
         [19, 21],
         [20, 21],
         [21, 22],
         [22, 23],
         [23, 24],
         [25, 26],
         [26, 29],
         [27, 29],
         [26, 28],
         [30, 31],
         [31, 32],
         [33, 34],
         [35, 36],
         [34, 37],
         [37, 38],
         [38, 39],
         [ 2,  3],
         [ 7,  8],
         [16, 19],
         [24, 25],
         [29, 30],
         [34, 35],
         [ 4,  5],
         [ 9, 10],
         [32, 33]], dtype=torch.int32)

    weights = torch.tensor([[0.3681, 0.3683, 0.3690, 0.3683, 0.3691, 0.3697, 0.3683, 0.3691, 0.3703,
        0.3683, 0.3696, 0.3712, 0.3687, 0.3700, 0.3716, 0.3683, 0.3693, 0.3705,
        0.3683, 0.3695, 0.3704, 0.3685, 0.3696, 0.3702, 0.3684, 0.3694, 0.3704,
        0.3685, 0.3698, 0.3700, 0.3685, 0.3688, 0.3686, 0.3680, 0.3680, 0.3681,
        0.3680, 0.3680, 0.3683]])

    tree = torch.tensor([[[ 0,  2],
         [ 1,  2],
         [ 3,  6],
         [ 4,  5],
         [ 5,  6],
         [ 5,  7],
         [ 7,  8],
         [ 8,  9],
         [10, 11],
         [10, 12],
         [13, 14],
         [15, 17],
         [16, 17],
         [17, 18],
         [19, 20],
         [20, 21],
         [22, 23],
         [23, 24],
         [24, 26],
         [25, 27],
         [26, 28],
         [27, 29],
         [30, 31],
         [32, 33],
         [33, 34],
         [35, 36],
         [36, 37],
         [37, 38],
         [38, 39],
         [ 2,  3],
         [ 9, 10],
         [12, 13],
         [18, 19],
         [20, 22],
         [24, 25],
         [31, 32],
         [34, 36],
         [14, 15],
         [29, 30]]], dtype=torch.int32)

    threshold = 0.45
    print("Length of tree: ", len(tree))
    print("Length of pairs: ", len(pairs))
    print("Length of weights: ", len(weights))
    return tree, pairs, weights, threshold
